{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! \u00b6 Welcome to the documentation for all my publicly released FiveM scripts/resources. About \u00b6 All my scripts are written in JavaScript or TypeScript. All my scripts are written solely by myself, unless something else is specifed. In that case I will credit the orignal author and describe what I've changed. This site is still in development, I'm in the process of updating all my scripts and releasing them so documentation will be added for each script as I finish them. Previous public releases that are missing documentation will also be added. Links \u00b6 GitHub Cfx.re forum Discord","title":"Home"},{"location":"#welcome","text":"Welcome to the documentation for all my publicly released FiveM scripts/resources.","title":"Welcome!"},{"location":"#about","text":"All my scripts are written in JavaScript or TypeScript. All my scripts are written solely by myself, unless something else is specifed. In that case I will credit the orignal author and describe what I've changed. This site is still in development, I'm in the process of updating all my scripts and releasing them so documentation will be added for each script as I finish them. Previous public releases that are missing documentation will also be added.","title":"About"},{"location":"#links","text":"GitHub Cfx.re forum Discord","title":"Links"},{"location":"projects/","text":"Information \u00b6 All releases are available on my GitHub . License Information \u00b6 All my scripts use the MIT License: MIT License Copyright (c) 2020 - 2021 VikingTheDev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Information"},{"location":"projects/#information","text":"All releases are available on my GitHub .","title":"Information"},{"location":"projects/#license-information","text":"All my scripts use the MIT License: MIT License Copyright (c) 2020 - 2021 VikingTheDev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License Information"},{"location":"projects/Discord/vDiscord/","text":"General \u00b6 vDiscord is an API that allows you to interact with a Discord Bot . The resource comes in two \"pieces\", the API itself that runs outside of the server, and vConnect. The API and vConnect uses a websocket to communicate, meaning all interactions are instantaneous. Why the websocket? \u00b6 Discord.js won't run on server due some compatability issues. There used to be a forked version of discord.js that ran on server, but it stopped working for me, so I had to write an API instead. Although it's annoying having to run it outside the server, it brings the benefit of being able to run the latest version of discord.js. Installation \u00b6 Prerequisites \u00b6 Node.js (download here ) and a discord bot in your community's discord server (You can create a bot here ). Steps \u00b6 Download or clone the resource from this repository . When you open the downloaded folder you will find two folders; vConnect and vAPI . Move vConnect into your resource folder and add ensure vConnect to your server.cfg. Open a command-line interface (CMD, Bash, Powershell etc.), and navigate to the vConnect folder. Type npm install , and wait for npm to install all dependencies. Move vAPI to a location of your choice outside of the server files i.e. the desktop. Open your CLI and navigate to the vAPI folder. Type the following npm install and wait for npm to install all dependencies. To start the API, navigate to the folder in your CLI and type node src/index.js . I'd recommend setting up a .bat file for this so that you don't have to check the docs everytime you want to start the API. It does not matter if you start the API before or after the server, or if you close and reopen it while the server is running. When vConnect connects to vAPI a message will be logged in both consoles. Warning You have to configure both scripts before running them. Configuration \u00b6 vAPI \u00b6 Open config.api.json . Change botToken to the token of the discord bot you're using (https://discord.com/developers/applications). Change guildId to the ID of you community's discord server (Enable developer mode on discord, right click your server and press \"Copy ID\"). Change websocketToken to a token of your choice, this is to ensure no unauthorized connections take place so it should preferably be something hard to guess. vConnect \u00b6 Open config.json . Change queryToken to the same token as websocketToken . Again, make it secure as this is to prevent unauthorized connections. Exports \u00b6 user \u00b6 Methods for interacting with a user, currently used for adding/removing roles, sending DMs and moving a user to a VC. Function user ( type , data , cb => {}); Parameter Type Description type String Used to define which type of interaction you want to use data Object or String Object containing data neccessary for the function, see below for more info cb Callback Callback returning an object with a status message (success or error) Types roleAdd Used for adding a role to a user. data object structure: Parameter Type Description user String ID of the user you're adding the role to role String ID of the role you wish to add Example Code JS exports . discord . user ( \"roleAdd\" , { user : \"230347924951793664\" , role : \"774617965337247765\" }, cb => { console . log ( cb ) }); Output { \"err\" : true / false , \"message\" : status_message } LUA # To - come Output { \"err\" : true / false , \"message\" : status_message } C# #To-come Output { \"err\" : true / false , \"message\" : status_message } roleRemove Used for removing a role to from user. data object structure: Parameter Type Description user String ID of the user you're removing the role from role String ID of the role you wish to remove Example Code JS exports . discord . user ( \"roleRemove\" , { user : \"230347924951793664\" , role : \"774617965337247765\" }, cb => { console . log ( cb ) }); Output { \"err\" : true / false , \"message\" : status_message } LUA # To - come Output { \"err\" : true / false , \"message\" : status_message } C# #To-come Output { \"err\" : true / false , \"message\" : status_message } moveVC Used for moving a user to a different VC. data object structure: Parameter Type Description user String ID of the user you're moving channel String ID of the channel you're moving the user to Example Code JS exports . discord . user ( \"moveVC\" , { user : \"230347924951793664\" , channel : \"811258115537371186\" }, cb => { console . log ( cb ) }); Output { \"err\" : true / false , \"message\" : status_message } LUA # To - come Output { \"err\" : true / false , \"message\" : status_message } C# #To-come Output { \"err\" : true / false , \"message\" : status_message } sendDM Used for sending a DM to a user. data object structure: Parameter Type Description user String ID of the user you're messaging message String or Object Message content either as string or an embed object Example Code JS exports . discord . user ( \"semdDM\" , { user : \"230347924951793664\" , message : \"Hi :)\" }, cb => { console . log ( cb ) }); Output { \"err\" : true / false , \"message\" : status_message } LUA # To - come Output { \"err\" : true / false , \"message\" : status_message } C# #To-come Output { \"err\" : true / false , \"message\" : status_message } sendLogMsg \u00b6 Export used to send regualar and embed messages to a channel, intended to be used for logging. Function sendLogMsg ( type , channel , data , cb => {}); Parameter Type Description type String Used to define which type of message you want to send channel String Used to define which channel the message should be sent to data Object or String Object or string containing message data, content depends on type, see below for more info on this cb Callback Callback returning a bool and an object containing message info/any error messages Types regular Used for sending a regular message to a channel, takes a string as data . Example Code JS const channel = \"*textchannel id*\" ; const message = \"Hello World!\" ; exports . discord . sendLogMsg ( \"regular\" , channel , message , cb => { console . log ( cb ) }); Output If the channel is valid and the message is successfully delivered: { \"sent\" : true , \"id\" : \"*message id*\" , \"channelId\" : \"*id of textchannel*\" } If the channel is invalid or some other error occurs: { \"sent\" : false , \"error\" : err . message } LUA # To - come Output If the channel is valid and the message is successfully delivered: { \"sent\" : true , \"id\" : \"*message id*\" , \"channelId\" : \"*id of textchannel*\" } If the channel is invalid or some other error occurs: { \"sent\" : false , \"error\" : err . message } C# #To-come Output If the channel is valid and the message is successfully delivered: { \"sent\": true, \"id\": \"*message id*\", \"channelId\": \"*id of textchannel*\" } If the channel is invalid or some other error occurs: { \"sent\": false, \"error\": err.message } embed Used for sending a embed message to a channel, takes an object as data . Example Code JS const channel = \"*textchannel id*\" ; const embedobj = { \"content\" : \"<@&767803636926906419>\" , \"embed\" : { author : { name : \"Name of author\" , iconURL : \"https://cdn.discordapp.com/attachments/562656258415525898/571040114277613598/officialssrplogo.png\" }, color : \"12745742\" , title : \"This is a title\" , description : \"This is a description\" , fields : [ { name : \"field1\" , value : \"field 1 text\" }, { name : \"field2\" , value : \"field 2 text\" } ], footer : { text : \"Test \u00a9 Petrikov\" , iconURL : \"https://cdn.discordapp.com/attachments/562656258415525898/571040114277613598/officialssrplogo.png\" }, timestamp : Date . now () } } exports . discord . sendLogMsg ( \"embed\" , channel , embedobj , cb => { console . log ( cb ) }) Output If the channel is valid and the message is successfully delivered: { \"sent\" : true , \"id\" : \"*message id*\" , \"channelId\" : \"*id of textchannel*\" } If the channel is invalid or some other error occurs: { \"sent\" : false , \"error\" : err . message } LUA # To - come Output If the channel is valid and the message is successfully delivered: { \"sent\" : true , \"id\" : \"*message id*\" , \"channelId\" : \"*id of textchannel*\" } If the channel is invalid or some other error occurs: { \"sent\" : false , \"error\" : err . message } C# #To-come Output If the channel is valid and the message is successfully delivered: { \"sent\": true, \"id\": \"*message id*\", \"channelId\": \"*id of textchannel*\" } If the channel is invalid or some other error occurs: { \"sent\": false, \"error\": err.message } getUserData \u00b6 Returns an object containing user data. Function getUserData ( user , cb => {}); Parameter Type Description user String The ID of the user you're fetching data for. cb Callback Callback returning the data object or undefined Example Code JS const userId = \"*userID*\" ; exports . discord . getUserData ( user , ( completed , data ) => { console . log ( completed , data ) }) Output If the user id is valid and the bot can successfully gather the data: { \"id\" : \"*users ID*\" , \"guildId\" : \"*guild ID*\" , \"tag\" : \"username#0000\" , \"displayName\" : \"*users displayname in guild*\" , \"roles\" : [ \"role 1 id\" , \"role 2 id\" , \"role 3 id\" ] } If the user id is invalid or some other error occurs: (Error info will be logged in console) undefined LUA # To - come Output If the user id is valid and the bot can successfully gather the data: true { \"id\" : \"*users ID*\" , \"guildId\" : \"*guild ID*\" , \"tag\" : \"username#0000\" , \"displayName\" : \"*users displayname in guild*\" , \"roles\" : [ \"role 1 id\" , \"role 2 id\" , \"role 3 id\" ] } If the user id is invalid or some other error occurs: false * error message ex . \"Cannot read property 'user' of undefined\" * C# #To-come Output If the user id is valid and the bot can successfully gather the data: true { \"id\": \"*users ID*\", \"guildId\": \"*guild ID*\", \"tag\": \"username#0000\", \"displayName\": \"*users displayname in guild*\", \"roles\": [ \"role 1 id\", \"role 2 id\", \"role 3 id\" ] } If the user id is invalid or some other error occurs: false *error message ex. \"Cannot read property 'user' of undefined\"* checkDiscordBan \u00b6 Checks if a user is banned in the guild specified in the config. checkDiscordBan ( user , cb => {}); Parameter Type Description user String The ID of the user you're checking. cb Callback Callback returning a bool and the reason for the ban or an error message Example Code JS const user = \"*userID*\" exports . jsbase . checkDiscordBan ( user , ( bool , reason ) => { console . log ( bool , reason ); }); Output If the user is banned: { state : true , reason : \"*Reason for ban*\" } If the user is not banned: { state : false , reason : undefined } If an error occured: { state : false , reason : \"*error message*\" } LUA # To - come Output If the user is banned: { state : true , reason : \"*Reason for ban*\" } If the user is not banned: { state : false , reason : undefined } If an error occured: { state : false , reason : \"*error message*\" } C# #To-come Output If the user is banned: { state: true, reason: \"*Reason for ban*\" } If the user is not banned: { state: false, reason: undefined } If an error occured: { state: false, reason: \"*error message*\" } Events \u00b6 guildMemberUpdate \u00b6 Is triggered when a user is updated in the guild, i.e. name, roles etc. Server side event on ( 'vConnect:guildMemberUpdate' , ( m ) => {} ); Parameter Type Description m Callback Callback returning an object with info on updated the guild member Example Code JS on ( 'vConnect:guildMemberUpdate' , ( m ) => { console . log ( m ); }); Output { \"id\" : \"*users ID*\" , \"guildId\" : \"*guild ID*\" , \"tag\" : \"username#0000\" , \"displayName\" : \"*users displayname in guild*\" , \"roles\" : [ \"role 1 id\" , \"role 2 id\" , \"role 3 id\" ] } LUA # To - come Output If the user id is valid and the bot can successfully gather the data: true { \"id\" : \"*users ID*\" , \"guildId\" : \"*guild ID*\" , \"tag\" : \"username#0000\" , \"displayName\" : \"*users displayname in guild*\" , \"roles\" : [ \"role 1 id\" , \"role 2 id\" , \"role 3 id\" ] } C# #To-come Output If the user id is valid and the bot can successfully gather the data: true { \"id\": \"*users ID*\", \"guildId\": \"*guild ID*\", \"tag\": \"username#0000\", \"displayName\": \"*users displayname in guild*\", \"roles\": [ \"role 1 id\", \"role 2 id\", \"role 3 id\" ] } Client side event Functions exactly same way as the server side event, but will be triggered in client scripts (Currently triggers on ALL clients, which might not be optimal. Expect possible change here). onNet ( 'vConnect:guildMemberUpdate' , ( m ) => {} ); Parameter Type Description m Object Callback returning an object with info on updated the guild member Example Code JS onNet ( 'vConnect:guildMemberUpdate' , ( m ) => { console . log ( m ); }); Output { \"id\" : \"*users ID*\" , \"guildId\" : \"*guild ID*\" , \"tag\" : \"username#0000\" , \"displayName\" : \"*users displayname in guild*\" , \"roles\" : [ \"role 1 id\" , \"role 2 id\" , \"role 3 id\" ] } LUA # To - come Output If the user id is valid and the bot can successfully gather the data: true { \"id\" : \"*users ID*\" , \"guildId\" : \"*guild ID*\" , \"tag\" : \"username#0000\" , \"displayName\" : \"*users displayname in guild*\" , \"roles\" : [ \"role 1 id\" , \"role 2 id\" , \"role 3 id\" ] } C# #To-come Output If the user id is valid and the bot can successfully gather the data: true { \"id\": \"*users ID*\", \"guildId\": \"*guild ID*\", \"tag\": \"username#0000\", \"displayName\": \"*users displayname in guild*\", \"roles\": [ \"role 1 id\", \"role 2 id\", \"role 3 id\" ] } guildBanAdd \u00b6 Is triggered when a user is banned in the guild. Server side event on ( 'vConnect:guildBanAdd' , ({ guildId , userInfo , reason }) => { } ); Parameter Type Description guildId String The ID of the guild the user was banned in userInfo Object Object containing info about the user (id and username) reason String The reason for the ban Example Code JS on ( 'vConnect:guildBanAdd' , ({ guildId , userInfo , reason }) => { console . log ({ guildId , userInfo , reason }); }); Output { guildId : \"*id of the guild*\" , userinfo : { id : \"*id of the banned user*\" , username : \"*the users name*\" }, reason : \"*reason for the ban*\" } LUA # To - come Output { guildId : \"*id of the guild*\" , userinfo : { id : \"*id of the banned user*\" , username : \"*the users name*\" }, reason : \"*reason for the ban*\" } C# #To-come Output { guildId: \"*id of the guild*\", userinfo: { id: \"*id of the banned user*\", username: \"*the users name*\" }, reason: \"*reason for the ban*\" } guildBanRemove \u00b6 Is triggered when a user is unbanned in the guild. Server side event on ( 'vConnect:guildBanRemove' , ({ guildId , userInfo }) => { } ); Parameter Type Description guildId String The ID of the guild the user was unbanned in userInfo Object Object containing info about the user (id and username) Example Code JS on ( 'vConnect:guildBanRemove' , ({ guildId , userInfo }) => { console . log ({ guildId , userInfo }); }); Output { guildId : \"*id of the guild*\" , userinfo : { id : \"*id of the unbanned user*\" , username : \"*the users name*\" } } LUA # To - come Output { guildId : \"*id of the guild*\" , userinfo : { id : \"*id of the unbanned user*\" , username : \"*the users name*\" } } C# #To-come Output { guildId: \"*id of the guild*\", userinfo: { id: \"*id of the unbanned user*\", username: \"*the users name*\" } }","title":"vDiscord"},{"location":"projects/Discord/vDiscord/#general","text":"vDiscord is an API that allows you to interact with a Discord Bot . The resource comes in two \"pieces\", the API itself that runs outside of the server, and vConnect. The API and vConnect uses a websocket to communicate, meaning all interactions are instantaneous.","title":"General"},{"location":"projects/Discord/vDiscord/#why-the-websocket","text":"Discord.js won't run on server due some compatability issues. There used to be a forked version of discord.js that ran on server, but it stopped working for me, so I had to write an API instead. Although it's annoying having to run it outside the server, it brings the benefit of being able to run the latest version of discord.js.","title":"Why the websocket?"},{"location":"projects/Discord/vDiscord/#installation","text":"","title":"Installation"},{"location":"projects/Discord/vDiscord/#prerequisites","text":"Node.js (download here ) and a discord bot in your community's discord server (You can create a bot here ).","title":"Prerequisites"},{"location":"projects/Discord/vDiscord/#steps","text":"Download or clone the resource from this repository . When you open the downloaded folder you will find two folders; vConnect and vAPI . Move vConnect into your resource folder and add ensure vConnect to your server.cfg. Open a command-line interface (CMD, Bash, Powershell etc.), and navigate to the vConnect folder. Type npm install , and wait for npm to install all dependencies. Move vAPI to a location of your choice outside of the server files i.e. the desktop. Open your CLI and navigate to the vAPI folder. Type the following npm install and wait for npm to install all dependencies. To start the API, navigate to the folder in your CLI and type node src/index.js . I'd recommend setting up a .bat file for this so that you don't have to check the docs everytime you want to start the API. It does not matter if you start the API before or after the server, or if you close and reopen it while the server is running. When vConnect connects to vAPI a message will be logged in both consoles. Warning You have to configure both scripts before running them.","title":"Steps"},{"location":"projects/Discord/vDiscord/#configuration","text":"","title":"Configuration"},{"location":"projects/Discord/vDiscord/#vapi","text":"Open config.api.json . Change botToken to the token of the discord bot you're using (https://discord.com/developers/applications). Change guildId to the ID of you community's discord server (Enable developer mode on discord, right click your server and press \"Copy ID\"). Change websocketToken to a token of your choice, this is to ensure no unauthorized connections take place so it should preferably be something hard to guess.","title":"vAPI"},{"location":"projects/Discord/vDiscord/#vconnect","text":"Open config.json . Change queryToken to the same token as websocketToken . Again, make it secure as this is to prevent unauthorized connections.","title":"vConnect"},{"location":"projects/Discord/vDiscord/#exports","text":"","title":"Exports"},{"location":"projects/Discord/vDiscord/#user","text":"Methods for interacting with a user, currently used for adding/removing roles, sending DMs and moving a user to a VC.","title":"user"},{"location":"projects/Discord/vDiscord/#sendlogmsg","text":"Export used to send regualar and embed messages to a channel, intended to be used for logging.","title":"sendLogMsg"},{"location":"projects/Discord/vDiscord/#getuserdata","text":"Returns an object containing user data.","title":"getUserData"},{"location":"projects/Discord/vDiscord/#checkdiscordban","text":"Checks if a user is banned in the guild specified in the config. checkDiscordBan ( user , cb => {}); Parameter Type Description user String The ID of the user you're checking. cb Callback Callback returning a bool and the reason for the ban or an error message","title":"checkDiscordBan"},{"location":"projects/Discord/vDiscord/#events","text":"","title":"Events"},{"location":"projects/Discord/vDiscord/#guildmemberupdate","text":"Is triggered when a user is updated in the guild, i.e. name, roles etc.","title":"guildMemberUpdate"},{"location":"projects/Discord/vDiscord/#guildbanadd","text":"Is triggered when a user is banned in the guild.","title":"guildBanAdd"},{"location":"projects/Discord/vDiscord/#guildbanremove","text":"Is triggered when a user is unbanned in the guild.","title":"guildBanRemove"},{"location":"projects/Discord/vPerms/","text":"General \u00b6 vPerms is a real time permission system utilizting vDiscord . The script was originally created by SpaceTheDev ( forums , github ), so if you enjoy the script please show him some love. The only changes I have made to the script is adding some additional customizability in terms of the role hierarchy (adding subcategories), and making some minor changes to make it work with vDiscord . Check out the original release here . The script is event based, meaning that it allows for real-time roles (no need for relogging or restarting the server for perms to update!). The perms are based on discord roles. Demo video: \u00b6 Installation \u00b6 Install and configure vDiscord , if you run into problems check out the docs . Download or clone the resource from this repository . Move vPerms into your resource folder and add ensure vPerms to your server.cfg. Warning You have to configure the script before running it. Configuration \u00b6 Navigate to src/config.perms.json and open it. Change the categories/subcategories/roles to suit your needs. There's no limits to how many you can add. Watch the video below for a breakdown of how the permissions should be set up. Config breakdown: \u00b6 Exports \u00b6 getPlayerPerms \u00b6 Allows you to get the perms of a player (Server side). Function const perms = getPlayerPerms ( source ); Parameter Type Description source Player source Source of the player you want to get perms for. Example Code Config file used for the example: { \"permSetup\" : { \"staff\" : { \"adminstration\" : { \"owner\" : \"ID goes here\" , \"admin\" : \"ID goes here\" }, \"moderation\" : { \"mod\" : \"ID goes here\" , \"trial_mod\" : \"ID goes here\" }, \"developer\" : \"ID goes here\" } } } JS const perms = getPlayerPerms ( source ); console . log ( perms ) Output { category : { staff : true / false }, subcategory : { adminstration : true / false , moderation : true / false }, staff : { adminstration : { owner : true / false , admin : true / false }, moderation : { mod : true / false , trial_mod : true / false }, developer : true / false } } LUA # To - come Output { category : { staff : true / false }, subcategory : { adminstration : true / false , moderation : true / false }, staff : { adminstration : { owner : true / false , admin : true / false }, moderation : { mod : true / false , trial_mod : true / false }, developer : true / false } } C# #To-come Output { category: { staff: true / false }, subcategory: { adminstration: true / false, moderation: true / false }, staff: { adminstration: { owner: true / false, admin: true / false }, moderation: { mod: true / false, trial_mod: true / false }, developer: true / false } } Events \u00b6 setPerms \u00b6 Event triggered when perms are set for a user (Client side). Function onNet ( 'vPerms:setPerms' , ( perms ) => { } ); Parameter Type Description perms Object Object containing all permissisons for the user Example Code Config file used for the example: { \"permSetup\" : { \"staff\" : { \"adminstration\" : { \"owner\" : \"ID goes here\" , \"admin\" : \"ID goes here\" }, \"moderation\" : { \"mod\" : \"ID goes here\" , \"trial_mod\" : \"ID goes here\" }, \"developer\" : \"ID goes here\" } } } JS onNet ( 'vPerms:setPerms' , ( perms ) => { console . log ( perms ); }); Output { category : { staff : true / false }, subcategory : { adminstration : true / false , moderation : true / false }, staff : { adminstration : { owner : true / false , admin : true / false }, moderation : { mod : true / false , trial_mod : true / false }, developer : true / false } } LUA # To - come Output { category : { staff : true / false }, subcategory : { adminstration : true / false , moderation : true / false }, staff : { adminstration : { owner : true / false , admin : true / false }, moderation : { mod : true / false , trial_mod : true / false }, developer : true / false } } C# #To-come Output { category: { staff: true / false }, subcategory: { adminstration: true / false, moderation: true / false }, staff: { adminstration: { owner: true / false, admin: true / false }, moderation: { mod: true / false, trial_mod: true / false }, developer: true / false } }","title":"vPerms"},{"location":"projects/Discord/vPerms/#general","text":"vPerms is a real time permission system utilizting vDiscord . The script was originally created by SpaceTheDev ( forums , github ), so if you enjoy the script please show him some love. The only changes I have made to the script is adding some additional customizability in terms of the role hierarchy (adding subcategories), and making some minor changes to make it work with vDiscord . Check out the original release here . The script is event based, meaning that it allows for real-time roles (no need for relogging or restarting the server for perms to update!). The perms are based on discord roles.","title":"General"},{"location":"projects/Discord/vPerms/#demo-video","text":"","title":"Demo video:"},{"location":"projects/Discord/vPerms/#installation","text":"Install and configure vDiscord , if you run into problems check out the docs . Download or clone the resource from this repository . Move vPerms into your resource folder and add ensure vPerms to your server.cfg. Warning You have to configure the script before running it.","title":"Installation"},{"location":"projects/Discord/vPerms/#configuration","text":"Navigate to src/config.perms.json and open it. Change the categories/subcategories/roles to suit your needs. There's no limits to how many you can add. Watch the video below for a breakdown of how the permissions should be set up.","title":"Configuration"},{"location":"projects/Discord/vPerms/#config-breakdown","text":"","title":"Config breakdown:"},{"location":"projects/Discord/vPerms/#exports","text":"","title":"Exports"},{"location":"projects/Discord/vPerms/#getplayerperms","text":"Allows you to get the perms of a player (Server side).","title":"getPlayerPerms"},{"location":"projects/Discord/vPerms/#events","text":"","title":"Events"},{"location":"projects/Discord/vPerms/#setperms","text":"Event triggered when perms are set for a user (Client side).","title":"setPerms"}]}